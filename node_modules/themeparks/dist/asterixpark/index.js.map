{"version":3,"sources":["../../lib/asterixpark/index.js"],"names":["Park","require","Moment","s_apiBase","Symbol","s_apiVersion","s_appVersion","reTime","reClosingTime","AsterixPark","options","name","timezone","latitude","longitude","api_base","api_version","app_version","Cache","Wrap","Promise","resolve","reject","HTTP","url","data","device","version","lang","apiversion","then","body","result","attractions","undefined","Log","ride_data","rideNames","i","poi","code","title","coupe_file","bind","FetchRideData","rideData","waittimes","GetOpeningTimes","parkTimes","allRidesClosed","todaysOpeningHour","now","parkTime","type","isBetween","openingTime","closingTime","latency","ridetime","attractionid","rideObject","GetRideObject","id","WaitTime","parseInt","closing_time","resultRe","exec","closingMoment","tz","Timezone","hours","minutes","seconds","Schedule","SetDate","openingHours","agenda","date","jour","firstResult","horaire","clone","endOf","specialHours","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// include core Park class\nvar Park = require(\"../park\");\n\nvar Moment = require(\"moment-timezone\");\n\nvar s_apiBase = Symbol();\nvar s_apiVersion = Symbol();\nvar s_appVersion = Symbol();\n\nvar reTime = /(\\d+)h - (\\d+|Minuit)(?:h?)/ig;\nvar reClosingTime = /(\\d+)h(\\d+)/;\n\n/**\n * Implements the Asterix Park API\n * @class\n * @extends Park\n */\nclass AsterixPark extends Park {\n    constructor(options = {}) {\n        options.name = options.name || \"Parc-Asterix\";\n        options.timezone = options.timezone || \"Europe/Paris\";\n        options.latitude = options.latitude || 49.136041;\n        options.longitude = options.longitude || 2.572768;\n\n        // inherit from base class\n        super(options);\n\n        // API Options\n        this[s_apiBase] = options.api_base || \"https://www.parcasterix.fr/webservices/\";\n        this[s_apiVersion] = options.api_version || \"1\";\n        this[s_appVersion] = options.app_version || \"320\";\n    }\n\n    // this park supports ride schedules\n    get SupportsRideSchedules() {\n        return true;\n    }\n\n    FetchRideData() {\n        return this.Cache.Wrap(\"ridedata\", function() {\n            return new Promise(function(resolve, reject) {\n                // grab ride names from the API\n                this.HTTP({\n                    url: this[s_apiBase] + \"api/attractions.json\",\n                    data: {\n                        device: \"android\",\n                        version: this[s_appVersion],\n                        lang: \"fr\",\n                        apiversion: this[s_apiVersion]\n                    }\n                }).then(function(body) {\n                    // extract names from returned data\n                    if (typeof body.result.attractions === undefined) {\n                        this.Log(\"Error body\", body);\n                        return reject(\"API didn't return expected format\");\n                    }\n\n                    var ride_data = body.result.attractions;\n                    var rideNames = {};\n\n                    for (var i = 0, poi; poi = ride_data[i++];) {\n                        rideNames[poi.code] = {\n                            title: poi.title,\n                            coupe_file: poi.coupe_file\n                        };\n                    }\n\n                    resolve(rideNames);\n                }.bind(this), reject);\n            }.bind(this));\n        }.bind(this), 60 * 60 * 24);\n    }\n\n    FetchWaitTimes() {\n        return new Promise(function(resolve, reject) {\n            // fetch ride names before getting wait times (usually this will come from the cache)\n            this.FetchRideData().then(function(rideData) {\n                this.HTTP({\n                    url: `${this[s_apiBase]}api/attentix.json`,\n                    data: {\n                        \"device\": \"android\",\n                        \"version\": this[s_appVersion],\n                        \"lang\": \"fr\",\n                        \"apiversion\": this[s_apiVersion]\n                    }\n                }).then(function(waittimes) {\n                    // get opening hours and mark every ride as closed if the park is just actually closed\n                    this.GetOpeningTimes().then(function(parkTimes) {\n                        var allRidesClosed = true;\n                        var todaysOpeningHour;\n\n                        var now = Moment();\n                        for (var i = 0, parkTime; parkTime = parkTimes[i++];) {\n                            if (parkTime.type == \"Operating\" && now.isBetween(parkTime.openingTime, parkTime.closingTime)) {\n                                allRidesClosed = false;\n                                // remember the park's opening hour so we can fill in ride opening times later\n                                todaysOpeningHour = parkTime.openingTime;\n                            }\n                        }\n\n                        if (!waittimes.latency || !waittimes.latency.latency) return reject(\"API didn't return expected format\");\n\n                        var ridetime;\n                        for (i = 0, ridetime; ridetime = waittimes.latency.latency[i++];) {\n                            // copying app's behavior where undefined latency values and attractions are skipped\n                            if(ridetime.latency && rideData[ridetime.attractionid]) {\n                                var rideObject = this.GetRideObject({\n                                    id: ridetime.attractionid,\n                                    name: (rideData[ridetime.attractionid].title) ? rideData[ridetime.attractionid].title : \"??\",\n                                });\n\n                                // if park is closed, just mark all rides as closed\n                                if (allRidesClosed) {\n                                    rideObject = -1;\n                                } else {\n                                    //FYI, latency = \"OUVERT\" / \"A L'ARRET\" / \"INDISPONIBLE\" / \"FERME\" / \"X\" (mn)\n                                    if (ridetime.latency === \"A L'ARRET\" || ridetime.latency === \"INDISPONIBLE\") {\n                                        rideObject.WaitTime = -2;\n                                    } else if (ridetime.latency === \"FERME\") {\n                                        rideObject.WaitTime = -1;\n                                    } else if (ridetime.latency === \"OUVERT\") {\n                                        rideObject.WaitTime = 0;\n                                    } else {\n                                        rideObject.WaitTime = parseInt(ridetime.latency, 10);\n\n                                        if (ridetime.closing_time) {\n                                            var resultRe = reClosingTime.exec(ridetime.closing_time);\n                                            if (resultRe) {\n                                                var closingMoment = Moment.tz(this.Timezone).hours(parseInt(resultRe[1])).minutes(parseInt(resultRe[2])).seconds(0);\n                                                rideObject.Schedule.SetDate({\n                                                    openingTime: todaysOpeningHour,\n                                                    closingTime: closingMoment,\n                                                    type: \"Operating\"\n                                                });\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        resolve();\n                    }.bind(this), reject);\n                }.bind(this), reject);\n            }.bind(this), reject);\n        }.bind(this));\n    }\n\n    FetchOpeningTimes() {\n        return new Promise(function(resolve, reject) {\n            this.HTTP({\n                url: `${this[s_apiBase]}03/fr`,\n                data: {\n                    \"device\": \"android\",\n                    \"version\": this[s_appVersion],\n                    \"lang\": \"fr\",\n                    \"apiversion\": this[s_apiVersion]\n                }\n            }).then(function(openingHours) {\n                if (!openingHours.agenda) return reject(\"API didn't return expected opening hours data\");\n\n                for (var i = 0, agenda; agenda = openingHours.agenda[i++];) {\n                    var date = Moment.tz(agenda.jour, \"DD-MM-YYYY\", this.Timezone);\n\n                    if (agenda.type === \"D\") {\n                        // park is closed\n                        this.Schedule.SetDate({\n                            date: date,\n                            type: \"Closed\"\n                        });\n                    } else {\n                        var resultRe;\n                        var firstResult = true;\n\n                        while ((resultRe = reTime.exec(agenda.horaire)) !== null) {\n                            // - Normal time\n                            this.Schedule.SetDate({\n                                date: date,\n                                openingTime: date.clone().hours(parseInt(resultRe[1])).minutes(0).seconds(0),\n                                closingTime: (resultRe[2] === \"Minuit\") ? date.endOf(\"day\") : date.clone().hours(parseInt(resultRe[2])).minutes(0).seconds(0),\n                                // can't send type for \"special hours\"\n                                type: !firstResult ? null : \"Operating\",\n                                // first result is normal hours, any further dates are special hours\n                                specialHours: !firstResult\n                            });\n\n                            // mark that we've parsed one set of opening hours, assume any others are special\n                            firstResult = false;\n                        }\n                    }\n                }\n\n                resolve();\n            }.bind(this), reject);\n        }.bind(this));\n    }\n}\n\n// export the class\nmodule.exports = AsterixPark;\n"]}