{"version":3,"sources":["../../lib/merlinparks/altontowers.js"],"names":["MerlinPark","require","defaultFallbackData","AltonTowers","options","name","timezone","useragent","latitude","longitude","api_key","initial_data_version","fallback_data","version","Promise","resolve","then","catch","Item","FallbackData","HTTP","url","method","headers","calendarData","Attractions","themeParkOpeningTimes","find","item","Attraction","DateRanges","i","timeRange","isClosed","IsClosed","OpeningHours","applyDateRange","StartDate","EndDate","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAIA,aAAaC,QAAQ,SAAR,CAAjB;IACMC,mdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtBA,gBAAQC,IAAR,GAAeD,QAAQC,IAAR,IAAgB,cAA/B;AACAD,gBAAQE,QAAR,GAAmBF,QAAQE,QAAR,IAAoB,eAAvC;AACAF,gBAAQG,SAAR,GAAoB,cAApB;;AAEA;AACAH,gBAAQI,QAAR,GAAmBJ,QAAQI,QAAR,IAAoB,SAAvC;AACAJ,gBAAQK,SAAR,GAAoBL,QAAQK,SAAR,IAAqB,CAAC,QAA1C;;AAEA;AACAL,gBAAQM,OAAR,GAAkBN,QAAQM,OAAR,IAAmB,sCAArC;AACAN,gBAAQO,oBAAR,GAA+BP,QAAQO,oBAAR,IAAgC,sBAA/D;;AAEA;AACAP,gBAAQQ,aAAR,GAAwBR,QAAQQ,aAAR,IAAyBV,mBAAjD;;AAEA;AAhBsB,yHAiBhBE,OAjBgB;AAkBzB;;;;sCAEaS,O,EAAS;AAAA;;AACnB;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,uBAAO,4HAAoBF,OAApB,EAA6BG,IAA7B,CAAkCD,OAAlC,EAA2CE,KAA3C,CAAiD,YAAM;AAC1D;AACA,2BAAOF,QAAQ;AACXG,8BAAM,OAAKC;AADA,qBAAR,CAAP;AAGH,iBALM,CAAP;AAMH,aAPM,CAAP;AAQH;;;4CAEmB;AAAA;;AAChB,mBAAO,KAAKC,IAAL,CAAU;AACbC,qBAAK,mFADQ;AAEbC,wBAAQ,KAFK;AAGbC,yBAAS;AACL,+BAAW,wDADN;AAEL,wCAAoB;AAFf;AAHI,aAAV,EAOJP,IAPI,CAOC,UAACQ,YAAD,EAAkB;AACtB;AACA;AACA,oBAAIA,aAAaC,WAAjB,EAA8B;AAC1B,wBAAIC,wBAAwBF,aAAaC,WAAb,CAAyBE,IAAzB,CAA8B,UAACC,IAAD;AAAA,+BAAUA,KAAKC,UAAL,KAAoB,WAA9B;AAAA,qBAA9B,CAA5B;AACA,wBAAIH,yBAAyBA,sBAAsBI,UAAnD,EAA+D;AAC3D,6BAAK,IAAIC,IAAI,CAAR,EAAWC,SAAhB,EAA2BA,YAAYN,sBAAsBI,UAAtB,CAAiCC,GAAjC,CAAvC,GAA+E;AAC3E,gCAAIE,WAAWD,UAAUE,QAAV,KAAuB,IAAvB,IAA+BF,UAAUG,YAAV,KAA2B,QAAzE,CAD2E,CACQ;AACnF,mCAAKC,cAAL,CAAoBJ,UAAUK,SAA9B,EAAyCL,UAAUM,OAAnD,EAA4D,CAACL,QAA7D,EAAuED,UAAUG,YAAjF;AACH;AACD;AACH;AACJ;AACJ,aApBM,CAAP;AAqBH;;;;EA1DqBnC,U;;AA6D1BuC,OAAOC,OAAP,GAAiBrC,WAAjB","file":"altontowers.js","sourcesContent":["\"use strict\";\n\nvar MerlinPark = require(\"./index\");\nconst defaultFallbackData = require(\"./altontowers_data.json\");\n\n/**\n * Alton Towers\n * @class\n * @extends MerlinPark\n */\nclass AltonTowers extends MerlinPark {\n    /**\n     * Create a new AltonTowers object\n     */\n    constructor(options = {}) {\n        options.name = options.name || \"Alton Towers\";\n        options.timezone = options.timezone || \"Europe/London\";\n        options.useragent = \"okhttp/3.2.0\";\n\n        // set park's location as it's entrance\n        options.latitude = options.latitude || 52.991064;\n        options.longitude = options.longitude || -1.892292;\n\n        // Park API options\n        options.api_key = options.api_key || \"5bf34ca0-1428-4163-8dde-f4db4eab6683\";\n        options.initial_data_version = options.initial_data_version || \"2019-05-01T14:58:20Z\";\n\n        // Fallback data if the /data webservice doesn't work\n        options.fallback_data = options.fallback_data || defaultFallbackData;\n\n        // inherit from base class\n        super(options);\n    }\n\n    FetchParkData(version) {\n        // first, try to call base version (so when data appears, it will start fetching live data)\n        return new Promise((resolve) => {\n            return super.FetchParkData(version).then(resolve).catch(() => {\n                // return fallback data if data isn't live yet\n                return resolve({\n                    Item: this.FallbackData\n                });\n            });\n        });\n    }\n\n    FetchOpeningTimes() {\n        return this.HTTP({\n            url: \"https://www.altontowers.com/Umbraco/Api/OpeningTimes/GetAllAttractionOpeningTimes\",\n            method: \"GET\",\n            headers: {\n                \"Referer\": \"https://www.altontowers.com/useful-info/opening-times/\",\n                \"X-Requested-With\": \"XMLHttpRequest\",\n            }\n        }).then((calendarData) => {\n            // find theme park dates from response\n            // it also contains \"waterpark\", \"treetopquest\", \"extraordinarygolf\" and \"altontowersspa\" [sic] times as well in a separate array\n            if (calendarData.Attractions) {\n                var themeParkOpeningTimes = calendarData.Attractions.find((item) => item.Attraction === \"themepark\");\n                if (themeParkOpeningTimes && themeParkOpeningTimes.DateRanges) {\n                    for (let i = 0, timeRange; timeRange = themeParkOpeningTimes.DateRanges[i++];) {\n                        let isClosed = timeRange.IsClosed === true || timeRange.OpeningHours === \"Closed\"; // Best API ever !\n                        this.applyDateRange(timeRange.StartDate, timeRange.EndDate, !isClosed, timeRange.OpeningHours);\n                    }\n                    return;\n                }\n            }\n        });\n    }\n}\n\nmodule.exports = AltonTowers;"]}